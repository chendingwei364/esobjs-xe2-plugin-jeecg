import * as Cesium from 'cesium';
export declare function positionToCartesian(position: [number, number, number], result?: Cesium.Cartesian3): Cesium.Cartesian3;
export declare function positionFromCartesian(cartesian: Cesium.Cartesian3, result?: [number, number, number]): [number, number, number] | undefined;
export declare function toCartesian2(value: [number, number], result?: Cesium.Cartesian2): Cesium.Cartesian2;
export declare function fromCartesian2(cartesian: Cesium.Cartesian2, result?: [number, number]): [number, number];
export declare function toCartesian3(value: [number, number, number], result?: Cesium.Cartesian3): Cesium.Cartesian3;
export declare function fromCartesian3(cartesian: Cesium.Cartesian3, result?: [number, number, number]): [number, number, number];
export declare function toCartesian4(value: [number, number, number, number], result?: Cesium.Cartesian4): Cesium.Cartesian4;
export declare function fromCartesian4(cartesian: Cesium.Cartesian4, result?: [number, number, number, number]): [number, number, number, number];
export declare function toCartesian(value: [number, number], result?: Cesium.Cartesian2): Cesium.Cartesian2;
export declare function toCartesian(value: [number, number, number], result?: Cesium.Cartesian3): Cesium.Cartesian3;
export declare function toCartesian(value: [number, number, number, number], result?: Cesium.Cartesian4): Cesium.Cartesian4;
export declare function fromCartesian(cartesian: Cesium.Cartesian2, result?: [number, number]): [number, number];
export declare function fromCartesian(cartesian: Cesium.Cartesian3, result?: [number, number, number]): [number, number, number];
export declare function fromCartesian(cartesian: Cesium.Cartesian4, result?: [number, number, number, number]): [number, number, number, number];
export declare function toCartographic(position: [number, number, number], result?: Cesium.Cartographic): Cesium.Cartographic;
export declare function fromCartographic(carto: Cesium.Cartographic, result?: [number, number, number]): [number, number, number];
export declare function toColor(color: [number, number, number, number], result?: Cesium.Color): Cesium.Color;
export declare function fromColor(czmColor: Cesium.Color, result?: [number, number, number, number]): [number, number, number, number];
export declare function toNearFarScalar(NearFarScalar: [number, number, number, number], result?: Cesium.NearFarScalar): Cesium.NearFarScalar;
export declare function fromNearFarScalar(NearFarScalar: Cesium.NearFarScalar, result?: [number, number, number, number]): [number, number, number, number];
export declare function toHeadingPitchRoll(hpr: [number, number, number], result?: Cesium.HeadingPitchRoll): Cesium.HeadingPitchRoll;
export declare function fromHeadingPitchRoll(czmHpr: Cesium.HeadingPitchRoll, result?: [number, number, number]): [number, number, number];
export declare function toDistanceDisplayCondition(distanceDisplayCondition: [number, number], result?: Cesium.DistanceDisplayCondition): Cesium.DistanceDisplayCondition;
export declare function fromDistanceDisplayCondition(czmDistanceDisplayCondition: Cesium.DistanceDisplayCondition, result?: [number, number]): [number, number];
export declare function toQuaternion(quat: [number, number, number, number], result?: Cesium.Quaternion): Cesium.Quaternion;
export declare function fromQuaternion(czmQuat: Cesium.Quaternion, result?: [number, number, number, number]): [number, number, number, number];
export declare function positionAndRotationToQuaternion(position: [number, number, number], rotation: [number, number, number], result: Cesium.Quaternion): Cesium.Quaternion;
export declare function toRectangle(rectangle: [number, number, number, number], result?: Cesium.Rectangle): Cesium.Rectangle;
export declare function fromRectangle(czmRectangle: Cesium.Rectangle, result?: [number, number, number, number]): [number, number, number, number];
export declare function toEllipsoid(ellipsoid: [x: number, y: number, z: number], result?: Cesium.Ellipsoid): Cesium.Ellipsoid;
export declare function fromEllipsoid(czmEllipsoid: Cesium.Ellipsoid, result?: [x: number, y: number, z: number]): [x: number, y: number, z: number];
