import * as Cesium from 'cesium';
import { CzmBasePrimitive } from '../../CzmBasePrimitive';
import { ColorStopValueType } from 'xbsj-renderer/dist-node/xr-utils';
export declare type VolumeRenderingMode = "max" | "opaque" | "accum" | "accumColor";
export declare class VolumeRenderingPrimitive extends CzmBasePrimitive {
    private _scene;
    private _volumeTextureSize;
    private _volumeTexture;
    private _colorStops;
    private _gradientTexture;
    private _modelMatrix;
    private _minCartesian;
    private _maxCartesian;
    private _offsetCartesian;
    private _scaleCartesian;
    private _modelMatrixDirty;
    private _finalModeMatrix;
    private _boundingVolume;
    private _boundingSphere;
    private _fragColorFunctionString;
    private _minIntensity;
    private _maxIntensity;
    private _mode;
    private _shaded;
    private _stepSize;
    private _maxSteps;
    private _stpProperty;
    private _alphaRatio;
    private _accumFunctionString;
    private _shaderProgramDirty;
    private _xyClipBox;
    private _zClipBoxAndIntensityThreshold;
    private _czmSmartCommand;
    constructor(_scene: Cesium.Scene, options: {
        volumeTextureSize: Cesium.Cartesian4;
    });
    get colorStops(): ColorStopValueType[];
    set colorStops(value: ColorStopValueType[]);
    get colorStopsChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Event<[ColorStopValueType[], ColorStopValueType[]]>;
    set volumeTextureSize(value: Cesium.Cartesian4);
    get volumeTextureSize(): Cesium.Cartesian4;
    get volumeTextureSizeChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian4, Cesium.Cartesian4]>;
    get modelMatrix(): Cesium.Matrix4;
    set modelMatrix(value: Cesium.Matrix4);
    get modelMatrixChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Matrix4, Cesium.Matrix4]>;
    get minCartesian(): Cesium.Cartesian3;
    set minCartesian(value: Cesium.Cartesian3);
    get minCartesianChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian3, Cesium.Cartesian3]>;
    get maxCartesian(): Cesium.Cartesian3;
    set maxCartesian(value: Cesium.Cartesian3);
    get maxCartesianChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian3, Cesium.Cartesian3]>;
    get offsetCartesian(): Cesium.Cartesian3;
    set offsetCartesian(value: Cesium.Cartesian3);
    get offsetCartesianChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian3, Cesium.Cartesian3]>;
    get scaleCartesian(): Cesium.Cartesian3;
    set scaleCartesian(value: Cesium.Cartesian3);
    get scaleCartesianChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian3, Cesium.Cartesian3]>;
    get fragColorFunctionString(): string;
    set fragColorFunctionString(value: string);
    get fragColorFunctionStringChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[string, string]>;
    get minIntensity(): number;
    set minIntensity(value: number);
    get minIntensityChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get maxIntensity(): number;
    set maxIntensity(value: number);
    get maxIntensityChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get mode(): VolumeRenderingMode;
    set mode(value: VolumeRenderingMode);
    get modeChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[VolumeRenderingMode, VolumeRenderingMode]>;
    get shaded(): boolean;
    set shaded(value: boolean);
    get shadedChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[boolean, boolean]>;
    get stepSize(): number;
    set stepSize(value: number);
    get stepSizeChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get maxSteps(): number;
    set maxSteps(value: number);
    get maxStepsChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get stpProperty(): string;
    set stpProperty(value: string);
    get stpPropertyChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[string, string]>;
    get alphaRatio(): number;
    set alphaRatio(value: number);
    get alphaRatioChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get accumFunctionString(): string;
    set accumFunctionString(value: string);
    get accumFunctionStringChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[string, string]>;
    get finalModelMatrix(): Cesium.Matrix4;
    get boundingVolume(): Cesium.OrientedBoundingBox;
    get xyClipBox(): Cesium.Cartesian4;
    set xyClipBox(value: Cesium.Cartesian4);
    get xyClipBoxChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian4, Cesium.Cartesian4]>;
    get zClipBoxAndIntensityThreshold(): Cesium.Cartesian4;
    set zClipBoxAndIntensityThreshold(value: Cesium.Cartesian4);
    get zClipBoxAndIntensityThresholdChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[Cesium.Cartesian4, Cesium.Cartesian4]>;
    get volumeTexture(): Cesium.Texture;
    get boundingSphere(): Cesium.BoundingSphere;
    setImageOrBuffer(val: HTMLImageElement | Uint8Array): void;
    private _updateModelMatrixAndBS;
    private _textureCopy;
    private _updateShaderProgram;
    update(frameState: Cesium.FrameState): void;
}
