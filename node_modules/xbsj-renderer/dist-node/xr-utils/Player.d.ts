import { Destroyable } from "./base";
import { Event } from "./base";
import { StartUpdateFuncType } from "xbsj-renderer/dist-node/xr-base-utils";
export declare class Player extends Destroyable {
    private _speed;
    private _speedChangedEvent?;
    private _duration;
    private _durationChangedEvent?;
    private _loop;
    startUpdateFunc: StartUpdateFuncType;
    private _updateBindThis;
    private _cancelStartUpdateFunc?;
    private _startTimeStamp;
    private _playingChangedEvent?;
    private _startPlayingEvent?;
    private _stopPlayingEvent?;
    private _loopChangedEvent?;
    private _currentTime;
    constructor(duration?: number, startUpdateFunc?: StartUpdateFuncType);
    get startPlayingEvent(): Event<[number]>;
    get stopPlayingEvent(): Event<[number]>;
    get currentTimeChangedEvent(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    get loopChangedEvent(): Event<[boolean]>;
    set loop(value: boolean);
    get loop(): boolean;
    private _update;
    get currentTime(): number;
    set currentTime(value: number);
    private _setCurrentTimeInner;
    get durationChangedEvent(): Event<[number, number]>;
    get duration(): number;
    set duration(value: number);
    get speedChangedEvent(): Event<[number, number]>;
    get speed(): number;
    set speed(value: number);
    private _resetStartTime;
    private _startPlaying;
    private _stopPlaying;
    get playingChangedEvent(): Event<[boolean]>;
    get playing(): boolean;
    set playing(value: boolean);
}
