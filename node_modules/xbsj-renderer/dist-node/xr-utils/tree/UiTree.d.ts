import { Destroyable, Event } from "xbsj-renderer/dist-node/xr-base-utils";
import { RedrawInfo } from "./RedrawInfo";
import { Tree } from "./Tree";
import { TreeItem } from "./TreeItem";
export declare class UiTree<TreeItemType extends TreeItem, TreeType extends Tree<TreeItemType>> extends Destroyable {
    private _tree;
    private _redrawEvent;
    private _containerScrollTop;
    private _containerClientHeight;
    private _container;
    get container(): HTMLDivElement | undefined;
    set container(value: HTMLDivElement | undefined);
    get containerChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[HTMLDivElement | undefined, HTMLDivElement | undefined]>;
    private _redrawInfo;
    get redrawInfo(): RedrawInfo<TreeItemType>;
    getTreeItemPos(treeItem: TreeItemType): number[] | undefined;
    constructor(_tree: TreeType);
    collapseAll(): void;
    get tree(): TreeType;
    get redrawEvent(): Event<[RedrawInfo<TreeItemType>]>;
    set containerScrollTop(value: number);
    get containerScrollTop(): number;
    get containerScrollTopChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    set containerClientHeight(value: number);
    get containerClientHeight(): number;
    get containerClientHeightChanged(): import("xbsj-renderer/dist-node/xr-base-utils").Listener<[number, number]>;
    getAllItems(func?: (item: TreeItemType) => boolean): Generator<TreeItemType, void, unknown>;
    getAllSelectedItems(): Generator<TreeItemType, void, unknown>;
    getAllCheckedLeafItems(): Generator<TreeItemType, void, unknown>;
    clearAllSelectedItems(exceptsItems?: TreeItemType[]): void;
}
